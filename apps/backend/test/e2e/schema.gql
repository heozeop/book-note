# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BookResponseType {
  author: String
  coverUrl: String
  createdAt: DateTime!
  description: String
  id: ID!
  isbn: String
  pageCount: Float
  publishedDate: DateTime
  publisher: String
  tags: [TagType!]
  title: String!
  updatedAt: DateTime!
}

type BookSearchResponseType {
  display: Int!
  items: [BookType!]!
  page: Int
  start: Int!
  total: Int!
}

type BookType {
  author: String
  coverUrl: String
  createdAt: DateTime!
  description: String
  discount: Float
  externalId: String
  id: ID!
  isbn: String
  language: String
  pageCount: Int
  price: Float
  publishedDate: DateTime
  publisher: String
  subTitle: String
  title: String!
  updatedAt: DateTime!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

type CollectionResponseType {
  books: [BookResponseType!]
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

input CreateBookInput {
  author: String
  coverUrl: String
  description: String
  discount: Int
  externalId: String
  isbn: String
  language: String
  pageCount: Int
  price: Int
  publishedDate: DateTime
  publisher: String
  subTitle: String
  title: String!
}

input CreateCollectionInput {
  coverUrl: String
  description: String
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  addBookToCollection(bookId: String!, collectionId: String!): Boolean!
  changePassword(input: ChangePasswordInput!): Boolean!
  createBook(input: CreateBookInput!): UserBookResponseType
  createCollection(input: CreateCollectionInput!): CollectionResponseType!
  deleteAccount: Boolean!
  deleteBook(id: String!): Boolean!
  deleteCollection(id: String!): Boolean!
  removeBookFromCollection(bookId: String!, collectionId: String!): Boolean!
  updateBook(id: String!, input: UpdateBookInput!): UserBookResponseType
  updateBookStatus(id: String!, status: String!): UserBookResponseType
  updateCollection(id: String!, input: UpdateCollectionInput!): CollectionResponseType
  updateProfile(input: UpdateProfileInput!): User!
}

type Query {
  book(id: String!): UserBookResponseType
  books(status: String, tag: String): [UserBookResponseType!]!
  collection(id: String!): CollectionResponseType
  collectionBooks(collectionId: String!): [BookResponseType!]!
  collections: [CollectionResponseType!]!
  me: User!
  searchBooks(isbn: String, order: String, page: Int, query: String, size: Int, sort: String): BookSearchResponseType!
  searchLocalBooks(query: String!): [BookResponseType!]!
  user(id: String!): User!
  users: [User!]!
}

type TagType {
  books: [BookType!]
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  userId: String
}

input UpdateBookInput {
  author: String
  coverUrl: String
  description: String
  discount: Int
  isbn: String
  language: String
  pageCount: Int
  price: Int
  publishedDate: DateTime
  publisher: String
  subTitle: String
  title: String
}

input UpdateCollectionInput {
  coverUrl: String
  description: String
  name: String
}

input UpdateProfileInput {
  displayName: String
  profileImage: String
  timezone: String
}

type User {
  createdAt: DateTime!
  displayName: String!
  email: String!
  id: String!
  isVerified: Boolean!
  profileImage: String
  role: UserRole!
}

type UserBookResponseType {
  book: BookType!
  createdAt: DateTime!
  finishedAt: DateTime
  id: ID!
  startedAt: DateTime
  status: String!
  tags: [TagType!]
  updatedAt: DateTime!
}

"""The role of the user"""
enum UserRole {
  ADMIN
  USER
}